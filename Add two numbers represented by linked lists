
class Solution
{
    private:

    Node* reverse(Node* head){
        Node* curr = head;
        Node* prev = NULL;
        Node* next = NULL;

        while(curr != NULL){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }

    Node* insertAtTail(Node* &head, Node* &tail, int value){

        Node* temp = new Node(value);
        if(tail == NULL){
            head = temp;
            tail = temp;
        }else{
            tail->next = temp;
            tail = tail->next;
        }
    }

    Node* add(Node* first, Node* second){
        int carry = 0;

        Node* ansHead = NULL;
        Node* ansTail = ansHead;

        while(first != NULL && second != NULL){
            int sum = carry + first->data + second->data;
            int lDigit = sum%10;

            insertAtTail(ansHead, ansTail, lDigit);

            carry = sum/10;

            first = first ->next;
            second = second->next;
        }

        while(first != NULL){
            int sum = carry + first->data;
            int lDigit = sum%10;

            insertAtTail(ansHead, ansTail, lDigit);

            carry = sum/10;

            first = first ->next;
        }


        while(second != NULL){
            int sum = carry + second->data;
            int lDigit = sum%10;

            insertAtTail(ansHead, ansTail, lDigit);

            carry = sum/10;

            second = second ->next;
        }

        if(carry != 0){
            insertAtTail(ansHead, ansTail, carry);
        }


        return ansHead;
    }

    public:
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        // code here
        first = reverse(first);
        second = reverse(second);

        Node* ans = add(first, second);
        ans = reverse(ans);


        return ans;

    }
};
